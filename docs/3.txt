# DeepWiki Q&A with Code Context for Repository: endenwer/tradingview-ws
## Q1
I am basic user and want to get K-Line data for 1m to 4h but always failed.
### Answer
I understand you're trying to retrieve K-Line (candlestick) data for timeframes ranging from 1 minute to 4 hours using the `tradingview-ws` library, but you're experiencing failures.<cite />

## Supported Timeframes

The library supports various timeframes through the `timeframe` parameter in `getCandles()`. tradingview-ws:46-46  Valid timeframe values include:

- **Minute intervals**: Use numeric values like `1`, `5`, `15`, `30`, `60`, `240` (for 1m, 5m, 15m, 30m, 1h, 4h respectively) tradingview-ws:47-47
- **Daily/Weekly/Monthly**: Use string values `'1D'`, `'1W'`, `'1M'` tradingview-ws:46-46

## Common Issues and Solutions

### 1. Incorrect Timeframe Format
For 1-minute to 4-hour data, you must use **numeric values** (not strings):<cite />

```typescript
// Correct usage for 1m to 4h
const candles = await getCandles({
  connection,
  symbols: ['FX:AUDCAD'],
  timeframe: 1,    // 1 minute
  // timeframe: 60,   // 1 hour
  // timeframe: 240,  // 4 hours
  amount: 1000
})
``` tradingview-ws:144-148

### 2. Invalid Symbol Format
Ensure your symbols follow TradingView's naming convention (e.g., `'FX:AUDCAD'`, `'NASDAQ:AAPL'`). tradingview-ws:46-46  Invalid symbols return empty arrays rather than throwing errors. tradingview-ws:35-45

### 3. Data Limits
TradingView limits historical data to approximately 13,000 candles for hourly timeframes. tradingview-ws:41-41  For shorter timeframes like 1-minute, you'll get proportionally less historical data.<cite />

### 4. Connection Issues
Always ensure you have an active connection before calling `getCandles()`:<cite />

```typescript
const connection = await connect()
// Now use connection for getCandles()
``` tradingview-ws:68-135

## Working Example

Here's a complete working example for 1-hour data:<cite />

```typescript
import { connect, getCandles } from 'tradingview-ws'

const connection = await connect()
const candles = await getCandles({
  connection,
  symbols: ['FX:AUDCAD'],
  amount: 1000,
  timeframe: 60  // 1 hour
})
await connection.close()
``` tradingview-ws:12-26

## Notes

If you're still experiencing failures, please verify:
- Your symbol names are correct (check TradingView's chart interface) tradingview-ws:46-46
- You're using numeric timeframe values for minute/hour intervals tradingview-ws:46-46
- Your network connection allows WebSocket connections to `wss://prodata.tradingview.com` tradingview-ws:80-82

The library handles errors gracefully by returning empty arrays for invalid symbols rather than throwing exceptions. tradingview-ws:35-45  If you're getting empty results, double-check your symbol format and timeframe values.

Wiki pages you might want to explore:
- [Getting Started (endenwer/tradingview-ws)](/wiki/endenwer/tradingview-ws#2)
- [API Reference (endenwer/tradingview-ws)](/wiki/endenwer/tradingview-ws#3)
### Citations
**File:** src/index.ts (L46-46)
```typescript
type TradingviewTimeframe = number | '1D' | '1W' | '1M'
```
**File:** src/index.ts (L68-135)
```typescript
export async function connect(options: ConnectionOptions = {}): Promise<TradingviewConnection> {
  let token = 'unauthorized_user_token'

  if (options.sessionId) {
    const resp = await axios({
      method: 'get',
      url: 'https://www.tradingview.com/disclaimer/',
      headers: { "Cookie": `sessionid=${options.sessionId}` }
    })
    token = resp.data.match(/"auth_token":"(.+?)"/)[1]
  }

  const connection = new WebSocket("wss://prodata.tradingview.com/socket.io/websocket", {
    origin: "https://prodata.tradingview.com"
  })

  const subscribers: Set<Subscriber> = new Set()

  function subscribe(handler: Subscriber): Unsubscriber {
    subscribers.add(handler)
    return () => {
      subscribers.delete(handler)
    }
  }

  function send(name: string, params: any[]) {
    const data = JSON.stringify({ m: name, p: params })
    const message = "~m~" + data.length + "~m~" + data
    connection.send(message)
  }

  async function close() {
    return new Promise<void>((resolve, reject) => {
      connection.on('close', resolve)
      connection.on('error', reject)
      connection.close()
    })
  }

  return new Promise<TradingviewConnection>((resolve, reject) => {
    connection.on('error', error => reject(error))

    connection.on('message', message => {
      const payloads = parseMessage(message.toString())

      for (const payload of payloads) {
        switch (payload.type) {
          case 'ping':
            connection.send(payload.data)
            break;
          case 'session':
            send('set_auth_token', [token])
            resolve({ subscribe, send, close })
            break;
          case 'event':
            const event = {
              name: payload.data.m,
              params: payload.data.p
            }
            subscribers.forEach(handler => handler(event))
            break;
          default:
            throw new Error(`unknown payload: ${payload}`)
        }
      }
    })
  })
}
```
**File:** src/index.ts (L144-148)
```typescript
export async function getCandles({ connection, symbols, amount, timeframe = 60 }: GetCandlesParams) {
  if (symbols.length === 0) return []

  const chartSession = "cs_" + randomstring.generate(12)
  const batchSize = amount && amount < MAX_BATCH_SIZE ? amount : MAX_BATCH_SIZE
```
**File:** README.MD (L12-26)
```markdown
```ts
import { connect, getCandles } from 'tradingview-ws'

(async function() {
  const connection = await connect()
  const candles = await getCandles({
    connection,
    symbols: ['FX:AUDCAD', 'FX:AUDCHF'],
    amount: 10_000,
    timeframe: 60
  })
  await connection.close()
  console.log(`Candles for AUDCAD:`, candles[0])
  console.log(`Candles for AUDCHF:`, candles[1])
}());
```
**File:** README.MD (L41-41)
```markdown
Fetches all available candles for symbols. The maximum amount is around 13_000 candles for the hourly timeframe. Returns an array where each element is an array of candles for one symbol in the order it passed to the function.
```
**File:** README.MD (L46-46)
```markdown
* `symbols: string[]` - array of symbols. Symbol name can be found on Symbol info modal(click three dots after symbol name on the top left corner of the chart).
```
**File:** README.MD (L47-47)
```markdown
* `timeframe?: number | '1D' | '1W' | '1M'` - candlestick timeframe, default is `60`
```
**File:** src/index.spec.ts (L35-45)
```typescript
  it('returns empty candles for incorrect symbol', async function() {
    const connection = await connect()
    const candles = await getCandles({
      connection,
      symbols: ['FX:AUDCAD', 'UNKNOWN'],
    })
    await connection.close()

    expect(candles[0].length).to.gt(10_000)
    expect(candles[1].length).to.eq(0)
  })
```
https://deepwiki.com/search/i-am-basic-user-and-want-to-ge_e633a9f3-c6b3-4fcf-948f-a7e6656e402e?mode=fast

# DeepWiki Q&A with Code Context for Repository: Mathieu2301/TradingView-API
## Q1
I am basic user and want to get K-Line data for 1m to 4h but always failed.
### Answer
I understand you're trying to get K-Line (candlestick) data for timeframes from 1 minute to 4 hours using the TradingView-API, but you're encountering failures.

<cite />

## The Issue

Based on the codebase, you're likely experiencing one of these common problems when requesting intraday timeframes:

### 1. **Invalid Timeframe Format**

The API expects specific timeframe strings TradingView-API:30-34 . For your desired timeframes:
- 1 minute: `'1'`
- 5 minutes: `'5'`
- 15 minutes: `'15'`
- 30 minutes: `'30'`
- 1 hour: `'60'`
- 2 hours: `'120'`
- 4 hours: `'240'`

If you use incorrect formats like `'1m'` or `'4h'`, you'll get a "Critical error: invalid parameters" error TradingView-API:96-117 .

### 2. **Premium Timeframes Without Authentication**

Some custom timeframes require a premium TradingView account TradingView-API:70-94 . If you're not authenticated with valid credentials, certain timeframes may fail with a "custom_resolution" error.

### 3. **Correct Usage Example**

Here's how to properly request K-Line data TradingView-API:19-48 :

```javascript
const client = new TradingView.Client();
const chart = new client.Session.Chart();

// For 15-minute candles
chart.setMarket('BINANCE:BTCEUR', {
  timeframe: '15',  // Use '15', not '15m'
  range: 100        // Number of candles to load
});

// Wait for data to load
chart.onSymbolLoaded(() => {
  console.log('Market loaded');
});

chart.onUpdate(() => {
  console.log('Periods:', chart.periods.length);
});
```

The `chart.periods` property gives you access to the K-Line data TradingView-API:134-142 , where each period contains OHLCV data TradingView-API:49-57 .

## Notes

Make sure you're using the numeric string format for timeframes (`'1'`, `'60'`, `'240'`) rather than abbreviated formats like `'1m'` or `'4h'`. The API will reject invalid timeframe strings with a critical error. If you need authentication for premium features, pass your `token` and `signature` when creating the client TradingView-API:213-227 .

Wiki pages you might want to explore:
- [Chart Sessions (Mathieu2301/TradingView-API)](/wiki/Mathieu2301/TradingView-API#2.2)
- [API Reference (Mathieu2301/TradingView-API)](/wiki/Mathieu2301/TradingView-API#5)
### Citations
**File:** src/types.js (L30-34)
```javascript
/**
 * @typedef {'1' | '3' | '5' | '15' | '30'
 * | '45' | '60' | '120' | '180' | '240'
 * | '1D' | '1W' | '1M' | 'D' | 'W' | 'M'} TimeFrame
 */
```
**File:** tests/allErrors.test.ts (L70-94)
```typescript
  it.skip('throws an error when a custom timeframe is set without premium', async () => {
    console.log('Testing "custom timeframe" error:');

    const client = new TradingView.Client();
    const chart = new client.Session.Chart();

    const error = await waitForError(
      chart,
      () => chart.setMarket('BINANCE:BTCEUR', { // Set a market
        // @ts-expect-error
        timeframe: '20', // Set a custom timeframe
        /*
          Timeframe '20' isn't available because we are
          not logged in as a premium TradingView account
        */
      }),
    );

    console.log('=> Chart error:', error);

    expect(error).toBeDefined();
    expect(error[0]).toBe('Series error:');
    expect(error[1]).toBe('custom_resolution');
    expect(error.length).toBe(2);
  });
```
**File:** tests/allErrors.test.ts (L96-117)
```typescript
  it('throws an error when an invalid timeframe is set', async () => {
    console.log('Testing "Invalid timeframe" error:');

    const client = new TradingView.Client();
    const chart = new client.Session.Chart();

    const error = await waitForError(
      chart,
      () => chart.setMarket('BINANCE:BTCEUR', { // Set a market
        // @ts-expect-error
        timeframe: 'XX', // Set an invalid timeframe
      }),
    );

    console.log('=> Chart error:', error);

    expect(error).toBeDefined();
    expect(error[0]).toBe('Critical error:');
    expect(error[1]).toBe('invalid parameters');
    expect(error[2]).toBe('method: create_series. args: "[$prices, s1, ser_1, XX, 100]"');
    expect(error.length).toBe(3);
  });
```
**File:** tests/simpleChart.test.ts (L19-48)
```typescript
  it('sets market', async () => {
    chart.setMarket('BINANCE:BTCEUR', {
      timeframe: 'D',
    });

    while (
      chart.infos.full_name !== 'BINANCE:BTCEUR'
      || chart.periods.length < 10
    ) await utils.wait(100);

    expect(chart.infos.full_name).toBe('BINANCE:BTCEUR');
    expect(
      utils.calculateTimeGap(chart.periods),
    ).toBe(24 * 60 * 60);
  });

  it('sets timeframe', async () => {
    console.log('Waiting 1 second...');
    await utils.wait(1000);

    console.log('Setting timeframe to 15 minutes...');
    chart.setSeries('15');

    while (chart.periods.length < 10) await utils.wait(100);
    console.log('Chart timeframe set');

    expect(
      utils.calculateTimeGap(chart.periods),
    ).toBe(15 * 60);
  });
```
**File:** src/chart/session.js (L49-57)
```javascript
/**
 * @typedef {Object} PricePeriod
 * @prop {number} time Period timestamp
 * @prop {number} open Period open value
 * @prop {number} close Period close value
 * @prop {number} max Period max value
 * @prop {number} min Period min value
 * @prop {number} volume Period volume value
 */
```
**File:** src/chart/session.js (L134-142)
```javascript
   * Table of periods values indexed by timestamp
   * @type {Object<number, PricePeriod[]>}
   */
  #periods = {};

  /** @return {PricePeriod[]} List of periods values */
  get periods() {
    return Object.values(this.#periods).sort((a, b) => b.time - a.time);
  }
```
https://deepwiki.com/search/i-am-basic-user-and-want-to-ge_96c4526e-5504-4e9d-a34c-2ed469dedd0b?mode=fast
